<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="com.itwillbs.mapper.basicInfoMapper">
  
  <resultMap type="com.itwillbs.domain.ItemVO" id="itemMap">
  	<id property="item_num" column="item_num"/>
  	<result property="item_num" column="item_num"/>
  	<result property="item_cate_code" column="item_cate_code"/>
  	<result property="item_cli_code" column="item_cli_code"/>
  	<result property="item_name" column="item_name"/>
  	<result property="item_purchase_price" column="item_purchase_price"/>
  	<result property="item_sale_price" column="item_sale_price"/>
  	<result property="item_mat" column="item_mat"/>
  	<result property="comm" column="comm"/>
  	<result property="item_id" column="item_id"/>
  	<result property="group_name" column="group_name"/>
  	<collection property="itemCodeList" resultMap="itemCodeMap"></collection>
  	<collection property="codeList" resultMap="codeMap"></collection>
  </resultMap>
  
  <resultMap type="com.itwillbs.domain.ItemCodeVO" id="itemCodeMap">
  	<result property="s_cate_item_code" column="s_cate_item_code"/>
  	<result property="s_cate_item_name" column="s_cate_item_name"/>
  	<result property="m_cate_item_code" column="m_cate_item_code"/>
  </resultMap>

	<resultMap type="com.itwillbs.domain.CodeVO" id="codeMap">
		<result property="group_code" column="group_code"/>
		<result property="group_name" column="group_name"/>
	</resultMap>
	
	<resultMap type="com.itwillbs.domain.ClientVO" id="clientMap">
		<id property="cli_num" column="cli_num" />
		<result property="cli_num" column="cli_num" />
		<result property="cli_name" column="cli_name" />
		<result property="cli_crn" column="cli_crn" />
		<result property="cli_cate" column="cli_cate" />
		<result property="cli_ind" column="cli_ind" />
		<result property="cli_postCode" column="cli_postCode" />
		<result property="cli_add1" column="cli_add1" />
		<result property="cli_add2" column="cli_add2" />
		<result property="cli_add3" column="cli_add3" />
		<result property="cli_tel" column="cli_tel" />
		<result property="cli_rep" column="cli_rep" />
		<result property="cli_email" column="cli_email" />
		<result property="pic_username" column="pic_username" />
		<result property="cli_id" column="cli_id" />
		<collection property="usersList" resultMap="usersMap"></collection>
	</resultMap>
	
	<resultMap type="com.itwillbs.domain.UsersVO" id="usersMap">
		<result property="username" column="username" />
		<result property="user_per_name" column="user_per_name" />
	</resultMap>
	
	<resultMap type="com.itwillbs.domain.InventoryVO" id="invenMap">
		<id property="inven_num" column="inven_num" />
		<result property="inven_num" column="inven_num" />
		<result property="wh_num" column="wh_num" />
		<result property="goods_num" column="goods_num" />
		<result property="inven_qty" column="inven_qty" />
		<collection property="warehouseList" resultMap="wareMap"/>
	</resultMap>

	<resultMap type="com.itwillbs.domain.WarehouseVO" id="wareMap">
		<id property="wh_num" column="wh_num" />
		<result property="wh_num" column="wh_num" />
		<result property="wh_name" column="wh_name" />
		<result property="wh_zone" column="wh_zone" />
		<result property="wh_rack" column="wh_rack" />
		<result property="wh_row" column="wh_row" />
		<result property="wh_column" column="wh_column" />
		<result property="wh_code" column="wh_code" />
	</resultMap>
	
	<!-- 창고 리스트 출력 -->
	<select id="listALL" resultType="WarehouseCodeVO">
		select * from warehouse_code
	</select>

	<!-- 거래처 리스트 출력 -->
	<select id="cliListALL" resultType="ClientVO">
	<![CDATA[
	SELECT * 
	FROM client
	ORDER BY cli_id
	LIMIT #{pageStart}, #{pageSize}
	]]>
	</select>
	
	<select id="totalClientCount" resultType="int">
	<![CDATA[
	SELECT COUNT(*)
	FROM client
	]]>
	</select>

	<!-- 품목 리스트 출력 -->
    <select id="itemListALL" resultType="itemVO">
	<![CDATA[
	SELECT i.item_num, i.item_cli_code, i.item_name, i.item_purchase_price, i.item_sale_price, c.group_name, i.item_mat, i.comm
	FROM item i
	JOIN item_code ic ON i.item_cate_code = ic.s_cate_item_code
	JOIN code c ON c.group_code = ic.m_cate_item_code
	ORDER BY i.item_num
	LIMIT #{pageStart}, #{pageSize}
	]]>
	</select>
	
	<select id="totalItemCount" resultType="int">
	<![CDATA[
	SELECT COUNT(*)
	FROM item i
	JOIN item_code ic ON i.item_cate_code = ic.s_cate_item_code
	JOIN code c ON c.group_code = ic.m_cate_item_code
	]]>
	</select>
	
	
	
	

	<!-- item 등록 -->
	<insert id="insertItem">
		insert into item (item_num, item_cate_code, item_cli_code, item_name, item_purchase_price, item_sale_price, item_mat, comm)
			SELECT CONCAT(#{item_cate_code}, LPAD(IFNULL(MAX(SUBSTRING(item_num, LENGTH(#{item_cate_code}) + 1)), 0) + 1, 3, '0')), #{item_cate_code},
				#{item_cli_code}, #{item_name}, #{item_purchase_price}, #{item_sale_price}, #{item_mat}, #{comm}
		FROM item
		where item_cate_code =#{item_cate_code};
	</insert>

	<!-- 거래처 등록 - 사업자 등록번호 중복 확인 -->
	<select id="cliCrnDup" resultType="int">
		select count(*)
		from client
		where cli_crn =#{cli_crn}
	</select>
	
	<!-- 거래처 등록 -->
	<insert id="cliUpdate" parameterType="map">
	    INSERT INTO client (cli_num, cli_name, cli_crn, cli_cate, cli_ind, cli_postCode, cli_add1, cli_add2, cli_add3, cli_tel, cli_rep, cli_email, pic_username)
	    SELECT
	        CONCAT(#{cli_cate}, LPAD(IFNULL(MAX(CAST(SUBSTRING(cli_num, LENGTH(#{cli_cate}) + 1) AS UNSIGNED)), 0) + 1, 4, '0')),
	        #{cli_name}, #{cli_crn}, #{cli_cate}, #{cli_ind}, #{cli_postCode}, #{cli_add1}, #{cli_add2}, #{cli_add3}, #{cli_tel}, #{cli_rep}, #{cli_email}, #{pic_username}
	    FROM client
	    WHERE cli_cate = #{cli_cate}
    </insert>
    
   	<!-- 거래처 상세보기 -->
   	<select id="cliDetials" parameterType="String" resultMap="clientMap">
	   	select c.cli_num, c.cli_name, c.cli_crn, c.cli_cate, c.cli_ind, c.cli_postCode, c.cli_add1, c.cli_add2, c.cli_add3, c.cli_tel, c.cli_email, c.cli_rep, c.pic_username, u.username, u.user_per_name
		from client c
		join users u on u.username = c.pic_username
		where c.cli_num = #{cli_num}
   	</select>
   	
	<!-- 거래처 수정 -->
   	<update id="updateClient">
		update client
		set cli_name =#{cli_name}, cli_cate =#{cli_cate}, cli_ind =#{cli_ind}, cli_postCode =#{cli_postCode},
			cli_add1 =#{cli_add1}, cli_add2 =#{cli_add2}, cli_add3=#{cli_add3}, cli_tel=#{cli_tel}, cli_rep=#{cli_rep},
			cli_email=#{cli_email}, pic_username=#{pic_username}
		where cli_num = #{cli_num}
   	</update>
   	
	<!-- 거래처 삭제 -->
   	<delete id="deleteClient">
   		DELETE FROM client
        WHERE cli_num IN
        <foreach collection="list" item="cli_num" open="(" separator="," close=")">
            #{cli_num}
        </foreach>
   	</delete>
   	
   	<!-- 품목 삭제 -->
   	<delete id="deleteItem">
   		delete from item
   		where item_num in
   		<foreach collection="list" item="item_num" open="(" separator="," close=")">
   			#{item_num}
   		</foreach>
   	</delete>
   	
	<!-- 품목 상세보기 -->
   	<select id="itemDetailsList" parameterType="String" resultMap="itemMap">
   		select i.item_num, ic.s_cate_item_name, ic.m_cate_item_code, i.item_cate_code, i.item_cli_code, i.item_name, i.item_purchase_price, i.item_sale_price, c.group_name, i.item_mat, i.comm
		from item i
		join item_code ic on i.item_cate_code = ic.s_cate_item_code
		join code c on c.group_code = ic.m_cate_item_code 
		where item_num =#{item_num}
   	</select>
   	
	<!-- 품목 수정 -->
   	<update id="updateItem">
   		update item
   		set item_num=#{item_num}, item_cli_code=#{item_cli_code}, item_name=#{item_name}, item_purchase_price=#{item_purchase_price}, item_sale_price=#{item_sale_price}, item_mat=#{item_mat}, comm=#{comm}
   		where item_num =#{item_num}
   	</update>
   	
	<!-- 창고 등록 -->
   	<insert id="insertWarehouse">
   		insert into warehouse_code (s_cate_wh_code, s_cate_wh_name, wh_tel, wh_postCode, wh_add1, wh_add2, wh_add3, wh_man, m_cate_wh_code)
		values(#{s_cate_wh_code}, #{s_cate_wh_name}, #{wh_tel}, #{wh_postCode}, #{wh_add1}, #{wh_add2}, #{wh_add3}, #{wh_man}, 'WH')
   	</insert>
   	
   	<!-- 창고 내부 삭제 -->
   	<delete id="deleteWarehouse">
   		delete from warehouse_code
   		where s_cate_wh_code in
   		<foreach collection="list" item="s_cate_wh_code" open="(" separator="," close=")">
   		 	#{s_cate_wh_code}
   		</foreach>
   	</delete>
   	
   	<!-- 창고 삭제 -->
   	<delete id="deleteWarehouseCode">
   		delete from warehouse
   		where wh_code in
   		<foreach collection="list" item="s_cate_wh_code" open="(" separator="," close=")">
   		 	#{s_cate_wh_code}
   		</foreach>
   	</delete>
   	
	<!-- 창고 상세 보기 -->
	<select id="warehouseDetailsList" parameterType="String" resultType="WarehouseCodeVo">
		select * 
		from warehouse_code
		where s_cate_wh_code = #{s_cate_wh_code}
	</select>
	
	<!-- 창고 정보 수정 -->
	<update id="updateWhCode">
		update warehouse_code
		set s_cate_wh_name=#{s_cate_wh_name}, wh_tel=#{wh_tel}, wh_postCode=#{wh_postCode}, wh_add1=#{wh_add1}, wh_add2=#{wh_add2}, wh_add3=#{wh_add3},
			wh_man=#{wh_man}, wh_status=#{wh_status}
		where s_cate_wh_code=#{s_cate_wh_code}
	</update>
   	
	<!--  재고 조회 -->
   	<select id="whInvenList" parameterType="String" resultMap="invenMap">
   		select inv.inven_num, inv.wh_num, inv.goods_num, inv.inven_qty, wa.wh_name, wa.wh_zone, wa.wh_rack, wa.wh_row, wa.wh_column
		from inventory inv
		join warehouse wa on inv.wh_num = wa.wh_num
		where inv.wh_num=#{wh_num};
   	</select>
   	
<!--    	dlk -->
<!--     <select id="getAllWarehouses" resultType="WarehouseVO"> -->
<!--         SELECT * FROM warehouse -->
<!--     </select> -->

	<!-- 창고 zone 불러오기 -->
    <select id="getZones" parameterType="String" resultType="String">
        SELECT DISTINCT wh_zone FROM warehouse WHERE wh_code = #{wh_code}
    </select>
   	
	<!-- 창고 rack 불러오기 -->
   	<select id="getRacks" parameterType="map" resultType="String">
        SELECT DISTINCT wh_rack FROM warehouse WHERE wh_code = #{wh_code} AND wh_zone = #{wh_zone}
    </select>
    
    <!-- 창고 열 불러오기 -->
    <select id="getColumns" parameterType="map" resultType="String">
        SELECT DISTINCT wh_column
        FROM warehouse
        WHERE wh_code = #{wh_code} AND wh_zone = #{wh_zone} AND wh_rack = #{wh_rack}
        order by wh_column ASC
    </select>

    <!-- 창고 행 불러오기 -->
    <select id="getRows" parameterType="map" resultType="String">
        SELECT DISTINCT wh_row
        FROM warehouse
        WHERE wh_code = #{wh_code} AND wh_zone = #{wh_zone} AND wh_rack = #{wh_rack}
        order by wh_row ASC
    </select>
    
	<!-- 창고 -> 재고 불러오기 -->
    <select id="getInventory" parameterType="String" resultMap="invenMap">
   		select inv.inven_num, inv.wh_num, inv.goods_num, inv.inven_qty, wa.wh_name, wa.wh_zone, wa.wh_rack, wa.wh_row, wa.wh_column
		from inventory inv
		join warehouse wa on inv.wh_num = wa.wh_num
		where inv.wh_num=#{wh_num};
   	</select>
   	
	<!-- 창고 -> MaxZone 불러오기 -->
    <select id="getMaxZoneNumber" parameterType="map" resultType="Integer">
        SELECT MAX(CAST(SUBSTR((ascii(wh_zone)), 1) AS UNSIGNED)) 
        FROM warehouse
        WHERE wh_code = #{wh_code} 
    </select>
    
	<!-- 창고 - zone 추가 -->
	<insert id="addZone">
		INSERT INTO warehouse (wh_num, wh_name, wh_zone, wh_rack, wh_row, wh_column, wh_code)
		VALUES (CONCAT(#{wh_code}, char(#{newZone}), 1, 1, 'A'), #{wh_name}, char(#{newZone}), 1, 1, 'A', #{wh_code})
	</insert>
	
	<!-- 창고 -> MaxRack 불러오기 -->
    <select id="getMaxRackNumber" parameterType="map" resultType="Integer">
        SELECT MAX(CAST(SUBSTR(wh_rack, 1) AS UNSIGNED)) 
        FROM warehouse
        WHERE wh_code = #{wh_code} 
          AND wh_zone = #{wh_zone}
    </select>
    
	<!-- 창고 -> rack 추가 -->
   	<insert id="addRack">
		INSERT INTO warehouse (wh_num, wh_name, wh_zone, wh_rack, wh_row, wh_column, wh_code)
		VALUES <!-- (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 1, 'A'), #{wh_name}, #{wh_zone}, #{newRack}, 1, 'A', #{wh_code}), -->
			   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 1, 'B'), #{wh_name}, #{wh_zone}, #{newRack}, 1, 'B', #{wh_code}),
    	       (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 1, 'C'), #{wh_name}, #{wh_zone}, #{newRack}, 1, 'C', #{wh_code}),
    		   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 1, 'D'), #{wh_name}, #{wh_zone}, #{newRack}, 1, 'D', #{wh_code}),
    		   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 2, 'A'), #{wh_name}, #{wh_zone}, #{newRack}, 2, 'A', #{wh_code}),
			   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 2, 'B'), #{wh_name}, #{wh_zone}, #{newRack}, 2, 'B', #{wh_code}),
    	       (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 2, 'C'), #{wh_name}, #{wh_zone}, #{newRack}, 2, 'C', #{wh_code}),
    		   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 2, 'D'), #{wh_name}, #{wh_zone}, #{newRack}, 2, 'D', #{wh_code}),
    		   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 3, 'A'), #{wh_name}, #{wh_zone}, #{newRack}, 3, 'A', #{wh_code}),
			   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 3, 'B'), #{wh_name}, #{wh_zone}, #{newRack}, 3, 'B', #{wh_code}),
    	       (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 3, 'C'), #{wh_name}, #{wh_zone}, #{newRack}, 3, 'C', #{wh_code}),
    		   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 3, 'D'), #{wh_name}, #{wh_zone}, #{newRack}, 3, 'D', #{wh_code}),
    		   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 4, 'A'), #{wh_name}, #{wh_zone}, #{newRack}, 4, 'A', #{wh_code}),
			   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 4, 'B'), #{wh_name}, #{wh_zone}, #{newRack}, 4, 'B', #{wh_code}),
    	       (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 4, 'C'), #{wh_name}, #{wh_zone}, #{newRack}, 4, 'C', #{wh_code}),
    		   (CONCAT(#{wh_code}, #{wh_zone}, #{newRack}, 4, 'D'), #{wh_name}, #{wh_zone}, #{newRack}, 4, 'D', #{wh_code})
   	</insert>
   	
</mapper>